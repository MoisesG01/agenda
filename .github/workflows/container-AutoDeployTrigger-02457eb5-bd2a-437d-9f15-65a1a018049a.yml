name: Trigger auto deployment for container

# When this action will be executed
on:
  # Automatically trigger it when detected changes in repo
  push:
    branches: [main]
    paths:
      - "**"
      - ".github/workflows/container-AutoDeployTrigger-02457eb5-bd2a-437d-9f15-65a1a018049a.yml"

  # Allow manual trigger
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write #This is required for requesting the OIDC JWT Token
      contents: read #Required when GH token is used to authenticate with private repo

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CONTAINER_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.CONTAINER_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.CONTAINER_AZURE_SUBSCRIPTION_ID }}

      - name: Try to setup ACR
        id: setup-acr
        run: |
          echo "Attempting to setup ACR..."
          if az provider register --namespace Microsoft.ContainerRegistry --wait; then
            echo "Provider registered successfully"
            if az acr show --name agendaacr --resource-group DefaultResourceGroup-MXC >/dev/null 2>&1; then
              echo "ACR agendaacr already exists"
              echo "ACR_AVAILABLE=true" >> $GITHUB_OUTPUT
            else
              echo "Creating ACR agendaacr..."
              if az acr create --resource-group DefaultResourceGroup-MXC --name agendaacr --sku Basic --admin-enabled true; then
                echo "ACR created successfully"
                echo "ACR_AVAILABLE=true" >> $GITHUB_OUTPUT
              else
                echo "Failed to create ACR"
                echo "ACR_AVAILABLE=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "Failed to register provider, ACR not available"
            echo "ACR_AVAILABLE=false" >> $GITHUB_OUTPUT
          fi

      - name: Get ACR credentials (if available)
        id: acr-credentials
        if: steps.setup-acr.outputs.ACR_AVAILABLE == 'true'
        run: |
          echo "Getting ACR credentials..."
          ACR_USERNAME=$(az acr credential show --name agendaacr --query username --output tsv)
          ACR_PASSWORD=$(az acr credential show --name agendaacr --query passwords[0].value --output tsv)
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_OUTPUT
          echo "ACR credentials obtained successfully"

      - name: Build and deploy to Container App (with ACR)
        if: steps.setup-acr.outputs.ACR_AVAILABLE == 'true'
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}
          dockerfilePath: ./Dockerfile
          acrName: agendaacr
          acrUsername: ${{ steps.acr-credentials.outputs.ACR_USERNAME }}
          acrPassword: ${{ steps.acr-credentials.outputs.ACR_PASSWORD }}
          containerAppName: container
          resourceGroup: DefaultResourceGroup-MXC
          containerAppEnvironment: managedEnvironment-DefaultResource-9b05
          imageToBuild: agendaacr.azurecr.io/container:${{ github.sha }}
          targetPort: 3000

      - name: Build and deploy to Container App (without ACR)
        if: steps.setup-acr.outputs.ACR_AVAILABLE == 'false'
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}
          dockerfilePath: ./Dockerfile
          containerAppName: container
          resourceGroup: DefaultResourceGroup-MXC
          containerAppEnvironment: managedEnvironment-DefaultResource-9b05
          targetPort: 3000
